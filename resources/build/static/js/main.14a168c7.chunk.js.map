{"version":3,"sources":["logo.svg","pages/CustomCard.js","pages/Todo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CustomCard","props","classes","this","bull","className","bullet","CardContent","Typography","m","bullet1","open","title","description","date","id","state","React","Component","withStyles","card","minWidth","textAlign","marginBottom","display","margin","transform","fontSize","pos","color","marginLeft","marginRight","button","maxWidth","maxHeight","Transition","forwardRef","ref","Slide","direction","Todo","handleOnClick","textRef","current","value","createRef","UpdateDialog","statedata","currenttask","RemoveDialog","DoneDialog","bind","handleClose","month","Date","getMonth","getDate","getFullYear","console","log","handleChange_title","handleChange_description","handleChange_date","handleClick","event","setState","txvalue_title","target","txvalue_description","txvalue_date","task","connection","WebSocket","JSON","stringify","operation","onopen","onmessage","e","setserver","data","method","feed","sendstring","send","UpdateDialogClose","RemoveDialogClose","DoneDialogClose","server","parse","namesList","map","name","ListItem","Card","key","conn","parentMethod","get1","CardActions","Button","size","onClick","RemoveDialogOpen","UpdateDialogOpen","DoneDialogOpen","Fragment","AppBar","position","Toolbar","variant","noWrap","grow","IconButton","handleClickOpen","aria-label","List","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","label","onChange","fullWidth","type","DialogActions","TransitionComponent","appBar","toolbarButtons","edge","divcard","formcontainer","InputLabelProps","shrink","style","justifyContent","close","theme","width","marginTop","flexWrap","flexGrow","search","borderRadius","shape","backgroundColor","fade","palette","common","white","inputRoot","inputInput","paddingTop","spacing","unit","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14a168c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/styles';\n\n\n\n  const styles = {\n    card: {\n        minWidth: 275,\n        textAlign:\"left\",\n        marginBottom: '4px',\n      },\n      bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(2.0)',\n      },\n      title: {\n        fontSize: 14,\n      },\n      pos: {\n        marginBottom: 12,\n      },\n      bullet1: {\n          display: 'inline-block',\n          fontSize: 14,\n          color:\"textSecondary\",\n          marginLeft:12,\n          marginRight: '30px',\n        },\n    button:{\n        maxWidth:'30px',\n        maxHeight:'15px',\n    },\n  };\n\n  class CustomCard extends React.Component{\n    constructor(props) {\n        super(props);\n    }\n\n\n    render(){\n        const {classes} = this.props;\n        const bull = <span className={classes.bullet}>•</span>;\n  \n    return (\n        <div>\n      \n     \n        <CardContent>\n          <Typography >{bull}<span >Title:</span><span m={2}  className={classes.bullet1}>\n          {\"  \"+this.props.open.title }\n          </span>\n          </Typography>\n          <Typography >{bull}<span >Description:</span><span m={2}  className={classes.bullet1}>\n          {\"  \"+this.props.open.description }\n          </span>\n         \n          </Typography>\n          <Typography >{bull}<span >Date:</span><span m={2}  className={classes.bullet1}>\n          {\"  \"+this.props.open.date }\n          </span>\n          </Typography>\n          <Typography >{bull}<span >id:</span><span m={2}  className={classes.bullet1}>\n          {\"  \"+this.props.open.id }\n          </span>\n          </Typography>\n          <Typography >{bull}<span >State:</span><span m={2}  className={classes.bullet1}>\n          {\"  \"+this.props.open.state }\n          </span>\n          </Typography>\n        </CardContent>\n      \n     </div>\n    );\n  }\n}\n\n  export default withStyles(styles)(CustomCard);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport connecter from '../middleware/connecter'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport InputBase from '@material-ui/core/InputBase';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\n\nimport AddIcon from '@material-ui/icons/Add';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\nimport CardActions from '@material-ui/core/CardActions';\nimport {DatePicker,MuiPickersUtilsProvider} from \"@material-ui/pickers\";\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport CustomCard from './CustomCard'\nconst useStyles = theme => ({\n  card: {\n    width: \"30%\",\n    marginTop: '70px',\n   \n  },\n  divcard: {\n    display:'flex', \n    justifyContent:'center' \n   \n  },\n  toolbarButtons: {\n    marginLeft: 'auto',\n  },\n  formcontainer: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    \n  },\n  grow: {\n      flexGrow: 1,\n  },\n  search: {\n      position: 'relative',\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      '&:hover': {\n          backgroundColor: fade(theme.palette.common.white, 0.25),\n      },\n  },\n  inputRoot: {\n      color: 'inherit',\n      width: '100%',\n  },\n  inputInput: {\n      paddingTop: theme.spacing.unit,\n      paddingRight: theme.spacing.unit,\n      paddingBottom: theme.spacing.unit,\n      paddingLeft: theme.spacing.unit * 10,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n  },\n});\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\n\nclass Todo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.textRef = React.createRef();\n      this.state = {date:\"test\",open: false, UpdateDialog: false,statedata:[],currenttask:{},RemoveDialog:false,DoneDialog:false};\n      this.handleOnClick = this.handleOnClick.bind(this);\n      this.handleClose = this.handleClose.bind(this);\n      var month =new Date().getMonth()+1\n      var date = new Date().getDate()\n      if(month<10){\n        var month=\"0\"+new Date().getMonth()\n      }\n      if(date<10){\n        var date=\"0\"+new Date().getDate()\n      }\n      this.date = new Date().getFullYear()+\"-\"+month+\"-\"+date\n      console.log(this.date)\n      this.handleChange_title = this.handleChange_title.bind(this);\n      this.handleChange_description = this.handleChange_description.bind(this);\n      this.handleChange_date = this.handleChange_date.bind(this);\n    \n      this.handleClick = this.handleClick.bind(this);\n     \n    }\n\n    handleChange_title(event) {\n      this.setState({txvalue_title: event.target.value});\n    }\n    handleChange_description(event) {\n      this.setState({txvalue_description: event.target.value});\n    }\n    handleChange_date(event) {\n      this.setState({txvalue_date: event.target.value});\n      console.log(this.state.txvalue_date)\n    }\n    \n\n   handleClickOpen() {\n    \n    this.setState(state => ({\n      open: true ,\n      txvalue_date:this.date\n    }));\n    }\n  \n   handleClose() {\n    // this.setState({setOpen: false })\n    this.setState(state => ({\n      open: false \n    }));\n    }\n  \n    UpdateDialogOpen(task) {\n    \n      this.setState(state => ({\n        UpdateDialog: true ,\n        currenttask: task,\n        txvalue_title:task.title,\n        txvalue_description:task.description,\n        txvalue_date:task.date\n\n      }));\n      console.log(\"current key is............\"+task.id);\n      }\n    \n    UpdateDialogClose() {\n    // this.setState({setOpen: false })\n    this.setState(state => ({\n      UpdateDialog: false \n    }));\n    }\n\n\n    RemoveDialogOpen(task) {\n    \n      this.setState(state => ({\n        RemoveDialog: true ,\n        currenttask: task,\n        \n\n      }));\n      console.log(\"current key is............\"+task.id);\n      }\n    \n      RemoveDialogClose() {\n    this.setState(state => ({\n      RemoveDialog: false \n    }));\n    }\n\n\n    DoneDialogOpen(task) {\n    \n      this.setState(state => ({\n        DoneDialog: true ,\n        currenttask: task,\n        \n\n      }));\n      console.log(\"current key is............\"+task.id);\n      }\n    \n    DoneDialogClose() {\n      this.setState(state => ({\n        DoneDialog: false \n      }));\n    }\n\n\n    handleOnClick = () => {\n      let todoText = this.textRef.current.value;\n      this.textRef.current.value = \"\";\n  };\n    componentWillMount(){\n      this.connection = new WebSocket('ws://127.0.0.1:4444')\n      var feed = {operation:\"getdata\"}\n      var sendstring=JSON.stringify(feed)\n      this.connection.onopen=()=>{\n        console.log(\"connection is opened \")\n       \n    }  \n     \n        this.connection .onmessage =(e)=>{\n          console.log(e)\n          this.setserver(e.data);\n         \n      }\n     \n     \n      \n    }\n\n\n    handleClick(method) {\n      console.log(method)\n      var feed = {method:method,title:this.state.txvalue_title,description:this.state.txvalue_description,date:this.state.txvalue_date,id:this.state.currenttask.id}\n      var sendstring=JSON.stringify(feed)\n      console.log(sendstring)\n      this.connection.send(sendstring)\n \n      this.handleClose()\n      this.UpdateDialogClose()\n      this. RemoveDialogClose()\n      this.DoneDialogClose()\n      this.setState(state => ({\n        txvalue_title: \"\",\n        txvalue_description:\"\",\n        txvalue_date:\"\"\n        \n      }));\n    }\n    setserver( e) {\n      console.log('statedata '+ e);\n        this.setState({server: e});\n        this.setState({statedata: JSON.parse(e)});\n        console.log(this.state.statedata)\n        \n      }\n    render() {\n      const { classes } = this.props;\n      console.log(\"statedata is\"+this.state.statedata)\n      var namesList = this.state.statedata.map(function iterator(name){\n                      return <ListItem>\n                                {/* <Card >{name.description}                                                                   \n                                </Card> */}\n                                <Card>\n                                <CardContent>\n                                <CustomCard key={name.id} open={name} conn={this.connection} parentMethod={this.get1} data={this.state.statedata}/>\n                                </CardContent>\n                                <CardActions>\n          {/* <Button size=\"small\" color='primary' onClick={this.handleOnClick(this.props.open.id)}>Update</Button> */}\n                                  <Button size=\"small\" color='secondary' onClick= {() => this.RemoveDialogOpen(name)}>Delete</Button>\n                                  <Button size=\"small\" color='primary' onClick= {() => this.UpdateDialogOpen(name)} >Update</Button>\n                                  <Button size=\"small\" onClick= {() => this.DoneDialogOpen(name)} >Done</Button>\n                                  \n                                </CardActions>\n                                </Card>\n                        </ListItem>\n                        \n                    },this)\n      return (\n        <React.Fragment>\n         <AppBar position=\"fixed\">\n                <Toolbar>\n                    <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                        Todo App\n                    </Typography>\n                    <div className={classes.grow} />\n                    <IconButton onClick={this.handleClickOpen.bind(this)} color=\"inherit\" aria-label=\"Open drawer\">\n                        <AddIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n\n\n            <div>\n      <Button variant=\"outlined\" color=\"primary\" onClick={this.handleClickOpen.bind(this)}>\n        Open full-screen dialog\n      </Button>\n\n      <List>{ namesList }</List>\n      <Dialog open={this.state.open} onClose={this.handleClose.bind(this)} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Add New  Task</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Enter fields for Task\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Enter title\"\n            onChange={this.handleChange_title}\n            value= {this.state.txvalue_title}\n            fullWidth\n          />\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Enter Description\"\n            onChange={this.handleChange_description}\n            value= {this.state.txvalue_description}\n            fullWidth\n          />\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            type=\"date\"\n            label=\"Enter Date\"\n            // defaultValue={this.date }\n            onChange={this.handleChange_date}\n            value= {this.state.txvalue_date}\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.handleClose.bind(this)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button  onClick={()=>this.handleClick(\"AddTodo\")}color=\"primary\">\n            Add Todo\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n\n\n\n      \n      {/* <Dialog fullScreen open={this.state.open} onClose={this.handleClose.bind(this)} TransitionComponent={Transition}> */}\n      \n      <Dialog  onClose={this.handleClose.bind(this)} TransitionComponent={Transition}>\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            \n            <Typography variant=\"h6\" className={classes.title}>\n              Add New Todo\n            </Typography>\n            <div className={classes.toolbarButtons}>\n            <IconButton edge=\"start\" color=\"inherit\" onClick={this.handleClose.bind(this)} aria-label=\"close\">\n              <CloseIcon />\n            </IconButton>\n            </div>\n            {/* <Button color=\"inherit\" onClick={this.handleClose.bind(this)}>\n              \n            </Button> */}\n          </Toolbar>\n        </AppBar>\n  \n        <div className={classes.divcard}>\n         <Card className={classes.card}>\n          <CardContent >\n          <form className={classes.formcontainer} >\n            <TextField\n                id=\"outlined-name\"\n                label=\"Title\"\n                value= {this.state.txvalue_title}\n                onChange={this.handleChange_title}\n                margin=\"normal\"\n                variant=\"outlined\"\n                \n            />\n             <br />\n            <TextField\n                id=\"outlined-name2\"\n                label=\"Description\"\n                value= {this.state.txvalue_description}\n                onChange={this.handleChange_description}\n                margin=\"normal\"\n                variant=\"outlined\"\n            />\n             <br />\n            <TextField\n                id=\"outlined-name3\"\n                label=\"Pick Date \"\n                type=\"date\"\n                value= {this.state.txvalue_date}\n                onChange={this.handleChange_date}\n                margin=\"normal\"\n                variant=\"outlined\"\n                // defaultValue={this.date }\n                InputLabelProps={{\n                  shrink: true,\n                }}\n            />\n          </form>\n          </CardContent>\n          <CardActions style={{justifyContent: 'center'}}>\n          {/* <Button variant=\"contained\" > ADD TODO</Button> */}\n          <Button variant=\"contained\" onClick={()=>this.handleClick(\"AddTodo\")}> ADD TODO</Button>\n          </CardActions>\n          \n          </Card>\n          </div>\n      </Dialog>\n\n      <Dialog open={this.state.UpdateDialog} onClose={this.UpdateDialogClose.bind(this)} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Update Task</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Enter new fields for Task\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Enter new title\"\n            onChange={this.handleChange_title}\n            value= {this.state.txvalue_title}\n            fullWidth\n          />\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Enter new Description\"\n            onChange={this.handleChange_description}\n            value= {this.state.txvalue_description}\n            fullWidth\n          />\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            type=\"date\"\n            label=\"Enter new Date\"\n            // defaultValue={this.date }\n            onChange={this.handleChange_date}\n            value= {this.state.txvalue_date}\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.UpdateDialogClose.bind(this)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={()=>this.handleClick(\"UpdateTodo\")} color=\"primary\">\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog open={this.state.RemoveDialog} onClose={this.RemoveDialogClose.bind(this)} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Remove Task</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Do you want to delete task: {this.state.currenttask.title}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.RemoveDialogClose.bind(this)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={()=>this.handleClick(\"RemoveTodo\")} color=\"secondary\">\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog open={this.state.DoneDialog} onClose={this.DoneDialogClose.bind(this)} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Complete Task</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Do you want to complete task: {this.state.currenttask.title}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.DoneDialogClose.bind(this)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={()=>this.handleClick(\"DoneTodo\")} color=\"primary\">\n            Complete\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n\n    \n\n    </div>\n           \n        </React.Fragment>\n      );\n    }\n    test(){\n      var feed = {operation:\"getdata\"}\n      var sendstring=JSON.stringify(feed)\n      this.connection .send(sendstring)\n      return this.setState({date:\"shehan\"});\n    }\n\n    close(){\n      this.connection.close()\n    }\n  }\n\n  export default withStyles(useStyles)(Todo)","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Todo from './pages/Todo'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}